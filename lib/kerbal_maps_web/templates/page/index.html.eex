<%= render @view_module, "_sidebar.html", assigns %>

<div id="mapid" class="sidebar-map" style="width: 100vw; height: 100vh; position: relative;"></div>

<script type="text/javascript" src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js" integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==" crossorigin=""></script>
<script type="text/javascript" src="https://ksp-maps.s3.amazonaws.com/js/leaflet.latlng-graticule.js"></script>
<script type="text/javascript" src="https://ksp-maps.s3.amazonaws.com/js/leaflet-sidebar.min.js"></script>
<script type="text/javascript" src="https://ksp-maps.s3.amazonaws.com/js/Leaflet.Icon.Glyph.js"></script>
<script>

  var map = L.map('mapid', {
    // preferCanvas: false,
    // attributionControl: true,
    // zoomControl: true,
    // closePopupOnClick: true,
    // boxZoom: true,
    // doubleClickZoom: true,
    // dragging: true,
    // zoomSnap: 1,
    // zoomDelta: 1,
    // trackResize: true,
    // inertia
    // inertiaDeceleration: 3000,
    // inertiaMaxSpeed: Infinity,
    // easeLinearity: 0.2,
    // worldCopyJump: false,
    // maxBoundsViscosity: 0.0,
    // keyboard: true,
    // keyboardPanDelta: 80,
    // scrollWheelZoom: true,
    // wheelDebounceTime: 40,
    // wheelPxPerZoomLevel: 60,
    // tap: true,
    // tapTolerance: 15,
    // touchZoom
    // bounceAtZoomLimits: true,
    crs: L.CRS.EPSG4326,
    center: [-0.1027, -74.5754],  // KSC
    zoom: 5,
    // minZoom
    // maxZoom
    // layers: [],
    // maxBounds: null,
    // renderer
    // zoomAnimation: true,
    // zoomAnimationThreshold: 4,
    // fadeAnimation: true,
    // markerZoomAnimation: true,
    // transform3DLimit: 2^23,
  })

  L.tileLayer('https://ksp-maps.s3.amazonaws.com/tiles/{body}/{style}/{z}/{x}/{y}.png', {
    // *** TileLayer options
    // minZoom: 0,
    maxZoom: 5,
    // subdomains
    // errorTileUrl
    // zoomOffset: 0,
    tms: true,
    // zoomReverse: false,
    // detectRetina: false,
    // crossOrigin: false,

    // *** GridLayer options
    // tileSize: 256,
    // opacity: 1.0,
    // updateWhenIdle
    // updateWhenZooming: true,
    // updateInterval: 200,
    // zIndex: 1,
    // latLngBounds
    maxNativeZoom: 5,
    minNativeZoom: 0,
    // noWrap: false,
    // pane
    // className
    // keepBuffer: 2,

    // *** Layer options
    attribution: 'Map data: source unknown' +
      ' ' +
      'Imagery: source unknown',

    // *** other options
    body: 'kerbin',
    style: 'sat'
  }).addTo(map);

  L.latlngGraticule({
      showLabel: true,
      dashArray: [5, 5],
      zoomInterval: [
          {start: 2, end: 3, interval: 30},
          {start: 4, end: 4, interval: 10},
          {start: 5, end: 7, interval: 5},
          {start: 8, end: 10, interval: 1}
      ]
  }).addTo(map);

  var popup = L.popup();

  function onMapClick(e) {
    popup
      .setLatLng(e.latlng)
      .setContent("You clicked the map at " + e.latlng.toString())
      .openOn(map);
  }
  map.on('click', onMapClick);

  var sidebar = L.control.sidebar('sidebar').addTo(map);

  <%= if @current_user do %>

    let channel = socket.channel(`data:${<%= @current_user.id %>}`, {})
    channel.join()
      .receive("ok", resp => {
        console.log("Joined successfully", resp);
        channel.push("get_data")
          .receive("ok", resp => {

            window.markers = [];
            for (let i = 0, size = resp.markers.length; i < size; ++i) {
              let marker_data = resp.markers[i];
              window.markers[marker_data.id] = marker_data;
            }

            window.overlays = [];
            for (let i = 0, size = resp.overlays.length; i < size; ++i) {
              let overlay_data = resp.overlays[i];
              window.overlays[overlay_data.id] = overlay_data;
            }

            // for (let value of window.overlays) { console.log(value); }

            for (let i = 0, size = resp.markers.length; i < size; ++i) {
              marker_data = resp.markers[i]
              var latitude = marker_data.latitude
              var longitude = marker_data.longitude
              var label = marker_data.label
              var icon = L.icon.glyph({prefix: marker_data.icon_prefix, glyph: marker_data.icon_name})
              L.marker([latitude, longitude], {icon: icon}).addTo(map).bindPopup(label);
            }
          })
          .receive("error", resp => {
            console.log("push_data returned an error", resp)
          })
      })
      .receive("error", resp => { console.log("Unable to join", resp) })

  <% end %>
</script>
