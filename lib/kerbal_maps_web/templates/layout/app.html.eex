<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <title>KerbalMaps</title>
    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" integrity="sha384-gfdkjb5BdAXd+lj+gudLWI+BXq4IuLW5IT+brZEZsLFm++aCMlF1V92rMkPaX4PP" crossorigin="anonymous">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-sidebar-v2@3.0.6/css/leaflet-sidebar.min.css">
    <%= if assigns[:user_token] do %>
      <script>window.userToken = "<%= assigns[:user_token] %>";</script>
    <% end %>
  </head>
  <body style="padding: 0; margin: 0;">

    <%= render @view_module, @view_template, assigns %>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"></script>
    <script type="text/javascript" src="https://unpkg.com/leaflet-graticule@0.0.1/Leaflet.Graticule.js"></script>
    <script type="text/javascript" src="https://unpkg.com/leaflet-sidebar-v2@3.0.6/js/leaflet-sidebar.min.js"></script>
    <script type="text/javascript" src="https://unpkg.com/leaflet.icon.glyph@0.2.1/Leaflet.Icon.Glyph.js"></script>
    <script type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
    <script>

      var map = L.map('mapid', {
        // preferCanvas: false,
        // attributionControl: true,
        // zoomControl: true,
        // closePopupOnClick: true,
        // boxZoom: true,
        // doubleClickZoom: true,
        // dragging: true,
        // zoomSnap: 1,
        // zoomDelta: 1,
        // trackResize: true,
        // inertia
        // inertiaDeceleration: 3000,
        // inertiaMaxSpeed: Infinity,
        // easeLinearity: 0.2,
        // worldCopyJump: false,
        // maxBoundsViscosity: 0.0,
        // keyboard: true,
        // keyboardPanDelta: 80,
        // scrollWheelZoom: true,
        // wheelDebounceTime: 40,
        // wheelPxPerZoomLevel: 60,
        // tap: true,
        // tapTolerance: 15,
        // touchZoom
        // bounceAtZoomLimits: true,
        crs: L.CRS.EPSG4326,
        center: [-0.1027, -74.5754],  // KSC
        zoom: 5,
        // minZoom
        // maxZoom
        // layers: [],
        // maxBounds: null,
        // renderer
        // zoomAnimation: true,
        // zoomAnimationThreshold: 4,
        // fadeAnimation: true,
        // markerZoomAnimation: true,
        // transform3DLimit: 2^23,
      });

      L.tileLayer('<%= System.get_env("TILE_CDN_URL") %>/{body}/{style}/{z}/{x}/{y}.png', {
        // *** TileLayer options
        // minZoom: 0,
        maxZoom: 7,
        // subdomains
        // errorTileUrl
        // zoomOffset: 0,
        tms: true,
        // zoomReverse: false,
        // detectRetina: false,
        // crossOrigin: false,

        // *** GridLayer options
        // tileSize: 256,
        // opacity: 1.0,
        // updateWhenIdle
        // updateWhenZooming: true,
        // updateInterval: 200,
        // zIndex: 1,
        // latLngBounds
        maxNativeZoom: 7,
        minNativeZoom: 0,
        // noWrap: false,
        // pane
        // className
        // keepBuffer: 2,

        // *** Layer options
        attribution: 'Map data: crowdsourced' +
          ' ' +
          'Imagery: Â© 2011-2018 Take-Two Interactive, Inc.',

        // *** other options
        body: 'kerbin',
        style: 'sat'
      }).addTo(map);

      L.latlngGraticule({
          showLabel: true,
          dashArray: [5, 5],
          zoomInterval: [
              {start: 2, end: 3, interval: 30},
              {start: 4, end: 4, interval: 10},
              {start: 5, end: 7, interval: 5},
              {start: 8, end: 10, interval: 1}
          ]
      }).addTo(map);

      var popup = L.popup();

      function onMapClick(e) {
        popup
          .setLatLng(e.latlng)
          .setContent("You clicked the map at " + e.latlng.toString())
          .openOn(map);
      }
      map.on('click', onMapClick);

      var sidebar = L.control.sidebar({container: "sidebar", autopan: true}).addTo(map);

      function new_channel(subtopic) {
        return socket.channel(`data:${subtopic}`, {});
      }

      function join_channel(channel) {
        channel.join()
          .receive("ok", response => {
              console.log(`Joined channel ${channel.topic}`, response)
            })
          .receive("error", response => {
              console.log("Unable to join channel", response);
            });
      }

      function show_overlay(overlayId) {
        // should only do the channel.push if the overlay layerGroup isn't defined
        // since the layerGroup is loaded in a callback, fire an event that adds the layerGroup to the map?
        // probably should always call channel.push and update the layerGroup if necessary
        channel.push("get_overlay", {"id":overlayId})
          .receive("ok", response => {
              overlay = window.overlays[overlayId];
              if (!overlay.layerGroup) {
                overlay.layerGroup = L.layerGroup();
                response.overlay.markers.forEach(function (marker) {
                  var latitude = marker.latitude;
                  var longitude = marker.longitude;
                  var label = `<strong>${marker.name}</strong><br/>${marker.latitude} ${marker.longitude}<br/>${marker.description}`;
                  var icon = L.icon.glyph({prefix: marker.icon_prefix, glyph: marker.icon_name});
                  L.marker([latitude, longitude], {icon: icon}).bindPopup(label).addTo(overlay.layerGroup);
                });
              }
              overlay.layerGroup.addTo(map);
              overlay.active = true;
            });
      }

      function hide_overlay(overlayId) {
        overlay = window.overlays[overlayId];
        overlay.layerGroup.removeFrom(map);
        overlay.active = false;
      }

      function load_overlays_for_body(paneId, body) {
        channel.push("get_all_overlays", {"body":body})
          .receive("ok", response => {
              // don't overwrite window.overlays; update it
              response.overlays.forEach(function (overlay) {
                if (!window.overlays[overlay.id]) {
                  overlay.layerGroup = null;
                  overlay.active = false;
                  window.overlays[overlay.id] = overlay
                }
              });
              add_overlays_to_list(paneId);
            });
      }

      function add_overlays_to_list(paneId) {
        pane = L.DomUtil.get(paneId);
        checkboxList = pane.querySelector("ul ul");
        checkboxList.innerHTML = "";

        for (const [overlayId, overlay] of Object.entries(window.overlays)) {
          checkboxList.insertAdjacentHTML(
            "beforeend",
            `
    <li>
    <input type="checkbox" id="show_overlay_${overlayId}" name="show_overlay" value="${overlayId}" ${overlay.active ? 'checked="true"' : ''}/>
    <label for="show_overlay_${overlayId}" style="display: inline-block">${overlay.name}</label>
    </li>
            `
          );
          document.getElementById(`show_overlay_${overlayId}`)
                  .addEventListener("click", function (event) {
                    var parsed = Number.parseInt(this.id.replace("show_overlay_", ""));
                    if (!Number.isNaN(parsed)) {
                      if (this.checked) {
                        show_overlay(parsed);
                      } else {
                        hide_overlay(parsed);
                      }
                    }
                  });
        }
      }

      <%= if @current_user do %>

        let channel = new_channel(`${<%= @current_user.id %>}`);
        join_channel(channel);
        window.overlays = {};

        sidebar.on("content", (event) => {
          switch (event.id) {
            case "sidebar-filter":
              load_overlays_for_body(event.id, "Kerbin");
          }
        });

      <% end %>
    </script>
  </body>
</html>
